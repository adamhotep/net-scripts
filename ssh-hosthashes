#!/usr/bin/perl
=head1 NAME

ssh-hosthashes - List duplicate entries in ~/.ssh/known_hosts by pubkey

=head1 SYNOPSIS

This will display a list of SSH hosts arranged in clusters by public key
hash, including line numbers for each entry. You can then consolidate these
entries by comma-separating them on the same line.

Arguments are assumed to be file(s) to scan. No options are currently
supported. You can alternatively pipe a known_hosts equivalent to
ssh-hosthashes, e.g.

    sudo cat /home/some_user/.ssh/known_hosts |ssh-hosthashes

ssh-hosthashes 0.2.20160312.1 Copyright 2010+ by Adam Katz, GPLv2+/BSD 2-clause

=head1 AUTHORS

Adam Katz E<lt>https://github.com/adamhotep/net-scriptsE<gt>

=cut

use warnings;
use strict;

if ( $ARGV[0] && $ARGV[0] =~ /^--?h/ ) {
  use Pod::Usage "pod2usage";
  pod2usage({-verbose=>2, -exitval=>0, -output=>\*STDOUT});
}

# filename, dash for standard input, or default to using ~/.ssh/known_hosts
if (defined($ARGV[0])) {
  if ($ARGV[0] =~ /^-$/) { open (KNOWN_HOSTS, "cat |") or die $!; }
  else { open (KNOWN_HOSTS, $ARGV[0]) or die $!; }
} else { open (KNOWN_HOSTS, "< $ENV{HOME}/.ssh/known_hosts") or die $!; }

my %hash = ();

while (<KNOWN_HOSTS>) {
  next unless /^(.+) (ssh-\S+\s.+)/;
  $hash{$2} .= "$.: $1\n\t";
}

my $col = 80;
if ( defined($ENV{COLUMNS}) ) { $col = $ENV{COLUMNS}; }
elsif (open (RESIZE, "resize 2>/dev/null |") ) {
  while (<RESIZE>) { next unless /COLUMNS=(\d+)/; $col = $1; last; }
  close (RESIZE);
}
$col -= 3;

foreach (keys %hash) {
  next unless $hash{$_} =~ /\n../;
  my $host = $hash{$_};
  s/^(.{$col}...).{4,}(.{$col})$/$1...$2/;
  print "$_\n\t$host\n";
}
